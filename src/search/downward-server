#! /bin/bash
BASEDIR="$(dirname "$0")"

option=$1
INPUTFILE=$2
shift 2

export LD_LIBRARY_PATH=/homedtic/bbonet/software/downward/fast-downward/src/lplib/coin/lib:/homedtic/bbonet/software/downward/fast-downward/src/lplib/cplex/bin/x86-64_sles10_4.1

if [[ "$(uname)" == "Darwin" ]]; then
    # Need to explicitly ask for GNU time (from MacPorts) on Mac OS X.
    #TIME="gtime"
    #if ! which $TIME >/dev/null; then
    #    echo "$TIME must be installed on Mac OSX (from MacPorts, perhaps) for this to work"
    #    exit 1
    #fi
    #TIME="$TIME --output=elapsed.time --format=%S\n%U\n"
    #STATE_SIZE=$($TIME --append "$BASEDIR/dispatch" $INPUTFILE)
    #UNIT_COST=$($TIME --append "$BASEDIR/unitcost" $INPUTFILE)
    STATE_SIZE=$($BASEDIR/dispatch $INPUTFILE)
    UNIT_COST=$($BASEDIR/unitcost $INPUTFILE)
else
    if [[ "$(uname)" == "SunOS" ]]; then
        TIME="time"
        TIME="$TIME --output=elapsed.time --format=%S\n%U\n"
        STATE_SIZE=$("$BASEDIR/dispatch" $INPUTFILE)
        UNIT_COST=$("$BASEDIR/unitcost" $INPUTFILE)
    else
        if [[ "$(uname -o)" == "Cygwin" ]]; then
            # Not sure how to handle time in Cygwin (command time doesn't work).
            # Ignoring it for now.
            STATE_SIZE=$("$BASEDIR/dispatch" $INPUTFILE)
            UNIT_COST=$("$BASEDIR/unitcost" $INPUTFILE)
        else
            STATE_SIZE=$("$BASEDIR/dispatch" $INPUTFILE)
            UNIT_COST=$("$BASEDIR/unitcost" $INPUTFILE)
        fi
    fi
fi

echo Dispatcher selected state size $STATE_SIZE.
echo This is a $UNIT_COST task.
SERVER="$BASEDIR/downward-server-$STATE_SIZE"

#$SERVER --heuristic "hlm,hff=lm_ff_syn(lm_rhw(reasonable_orders=true,lm_cost_type=2,cost_type=2))" --search "astar(hff)"
#$SERVER --heuristic "hlm,hff=lm_ff_syn(lm_rhw(reasonable_orders=true,lm_cost_type=2,cost_type=2))" --search "lazy_wastar([hff,hlm],preferred=[hff,hlm],w=5)"
#$SERVER --heuristic "hlm,hff=lm_ff_syn(lm_rhw(reasonable_orders=true,lm_cost_type=2,cost_type=2))" --search "lazy_greedy([hff,hlm],preferred=[hff,hlm])"
$SERVER --search "astar(blind())" "$@"
exit 0

if [[ "$option" == "seq-sat-fd-autotune-1" ]]; then
    "$SERVER" \
        --heuristic "hFF=ff(cost_type=1)" \
        --heuristic "hCea=cea(cost_type=0)" \
        --heuristic "hCg=cg(cost_type=2)" \
        --heuristic "hGoalCount=goalcount(cost_type=0)" \
        --heuristic "hAdd=add(cost_type=0)" \
        --search "iterated([
            lazy(alt([single(sum([g(),weight(hFF, 10)])),
                      single(sum([g(),weight(hFF, 10)]),pref_only=true)],
                      boost=2000),
                 preferred=hFF,reopen_closed=false,cost_type=1),
            lazy(alt([single(sum([g(),weight(hAdd, 7)])),
                      single(sum([g(),weight(hAdd, 7)]),pref_only=true),
                      single(sum([g(),weight(hCg, 7)])),
                      single(sum([g(),weight(hCg, 7)]),pref_only=true),
                      single(sum([g(),weight(hCea, 7)])),
                      single(sum([g(),weight(hCea, 7)]),pref_only=true),
                      single(sum([g(),weight(hGoalCount, 7)])),
                      single(sum([g(),weight(hGoalCount, 7)]),pref_only=true)],
                      boost=1000),
                 preferred=[hCea,hGoalCount],
                 reopen_closed=false,cost_type=1),
            lazy(alt([tiebreaking([sum([g(),weight(hAdd, 3)]),hAdd]),
                      tiebreaking([sum([g(),weight(hAdd, 3)]),hAdd],pref_only=true),
                      tiebreaking([sum([g(),weight(hCg, 3)]),hCg]),
                      tiebreaking([sum([g(),weight(hCg, 3)]),hCg],pref_only=true),
                      tiebreaking([sum([g(),weight(hCea, 3)]),hCea]),
                      tiebreaking([sum([g(),weight(hCea, 3)]),hCea],pref_only=true),
                      tiebreaking([sum([g(),weight(hGoalCount, 3)]),hGoalCount]),
                      tiebreaking([sum([g(),weight(hGoalCount, 3)]),hGoalCount],pref_only=true)],
                     boost=5000),
                 preferred=[hCea,hGoalCount],reopen_closed=false,cost_type=0),
            eager(alt([tiebreaking([sum([g(),weight(hAdd, 10)]),hAdd]),
                       tiebreaking([sum([g(),weight(hAdd, 10)]),hAdd],pref_only=true),
                       tiebreaking([sum([g(),weight(hCg, 10)]),hCg]),
                       tiebreaking([sum([g(),weight(hCg, 10)]),hCg],pref_only=true),
                       tiebreaking([sum([g(),weight(hCea, 10)]),hCea]),
                       tiebreaking([sum([g(),weight(hCea, 10)]),hCea],pref_only=true),
                       tiebreaking([sum([g(),weight(hGoalCount, 10)]),hGoalCount]),
                       tiebreaking([sum([g(),weight(hGoalCount, 10)]),hGoalCount],pref_only=true)],
                      boost=500),
                  preferred=[hCea,hGoalCount],reopen_closed=true,
                  pathmax=true,cost_type=0)],
            repeat_last=true,continue_on_fail=true)" "$@"
elif [[ "$option" == "seq-sat-fd-autotune-1-single-plan" ]]; then
    "$SERVER" \
        --heuristic "hFF=ff(cost_type=1)" \
        --heuristic "hCea=cea(cost_type=0)" \
        --heuristic "hCg=cg(cost_type=2)" \
        --heuristic "hGoalCount=goalcount(cost_type=0)" \
        --heuristic "hAdd=add(cost_type=0)" \
        --search "iterated([
            lazy(alt([single(sum([g(),weight(hFF, 10)])),
                      single(sum([g(),weight(hFF, 10)]),pref_only=true)],
                      boost=2000),
                 preferred=hFF,reopen_closed=false,cost_type=1),
            lazy(alt([single(sum([g(),weight(hAdd, 7)])),
                      single(sum([g(),weight(hAdd, 7)]),pref_only=true),
                      single(sum([g(),weight(hCg, 7)])),
                      single(sum([g(),weight(hCg, 7)]),pref_only=true),
                      single(sum([g(),weight(hCea, 7)])),
                      single(sum([g(),weight(hCea, 7)]),pref_only=true),
                      single(sum([g(),weight(hGoalCount, 7)])),
                      single(sum([g(),weight(hGoalCount, 7)]),pref_only=true)],
                      boost=1000),
                 preferred=[hCea,hGoalCount],
                 reopen_closed=false,cost_type=1),
            lazy(alt([tiebreaking([sum([g(),weight(hAdd, 3)]),hAdd]),
                      tiebreaking([sum([g(),weight(hAdd, 3)]),hAdd],pref_only=true),
                      tiebreaking([sum([g(),weight(hCg, 3)]),hCg]),
                      tiebreaking([sum([g(),weight(hCg, 3)]),hCg],pref_only=true),
                      tiebreaking([sum([g(),weight(hCea, 3)]),hCea]),
                      tiebreaking([sum([g(),weight(hCea, 3)]),hCea],pref_only=true),
                      tiebreaking([sum([g(),weight(hGoalCount, 3)]),hGoalCount]),
                      tiebreaking([sum([g(),weight(hGoalCount, 3)]),hGoalCount],pref_only=true)],
                     boost=5000),
                 preferred=[hCea,hGoalCount],reopen_closed=false,cost_type=0),
            eager(alt([tiebreaking([sum([g(),weight(hAdd, 10)]),hAdd]),
                       tiebreaking([sum([g(),weight(hAdd, 10)]),hAdd],pref_only=true),
                       tiebreaking([sum([g(),weight(hCg, 10)]),hCg]),
                       tiebreaking([sum([g(),weight(hCg, 10)]),hCg],pref_only=true),
                       tiebreaking([sum([g(),weight(hCea, 10)]),hCea]),
                       tiebreaking([sum([g(),weight(hCea, 10)]),hCea],pref_only=true),
                       tiebreaking([sum([g(),weight(hGoalCount, 10)]),hGoalCount]),
                       tiebreaking([sum([g(),weight(hGoalCount, 10)]),hGoalCount],pref_only=true)],
                      boost=500),
                  preferred=[hCea,hGoalCount],reopen_closed=true,
                  pathmax=true,cost_type=0)],
            repeat_last=true,continue_on_fail=true,continue_on_solve=false)" "$@"
elif [[ "$option" == "seq-sat-fd-autotune-2" ]]; then
    "$SERVER" \
        --heuristic "hCea=cea(cost_type=2)" \
        --heuristic "hCg=cg(cost_type=1)" \
        --heuristic "hGoalCount=goalcount(cost_type=2)" \
        --heuristic "hFF=ff(cost_type=0)" \
        --search "iterated([
            ehc(hCea, preferred=hCea,preferred_usage=0,cost_type=0),
            lazy(alt([single(sum([weight(g(), 2),weight(hFF, 3)])),
                      single(sum([weight(g(), 2),weight(hFF, 3)]),pref_only=true),
                      single(sum([weight(g(), 2),weight(hCg, 3)])),
                      single(sum([weight(g(), 2),weight(hCg, 3)]),pref_only=true),
                      single(sum([weight(g(), 2),weight(hCea, 3)])),
                      single(sum([weight(g(), 2),weight(hCea, 3)]),pref_only=true),
                      single(sum([weight(g(), 2),weight(hGoalCount, 3)])),
                      single(sum([weight(g(), 2),weight(hGoalCount, 3)]),pref_only=true)],
                     boost=200),
                 preferred=[hCea,hGoalCount],reopen_closed=false,cost_type=1),
            lazy(alt([single(sum([g(),weight(hFF, 5)])),
                      single(sum([g(),weight(hFF, 5)]),pref_only=true),
                      single(sum([g(),weight(hCg, 5)])),
                      single(sum([g(),weight(hCg, 5)]),pref_only=true),
                      single(sum([g(),weight(hCea, 5)])),
                      single(sum([g(),weight(hCea, 5)]),pref_only=true),
                      single(sum([g(),weight(hGoalCount, 5)])),
                      single(sum([g(),weight(hGoalCount, 5)]),pref_only=true)],
                     boost=5000),
                 preferred=[hCea,hGoalCount],reopen_closed=true,cost_type=0),
            lazy(alt([single(sum([g(),weight(hFF, 2)])),
                      single(sum([g(),weight(hFF, 2)]),pref_only=true),
                      single(sum([g(),weight(hCg, 2)])),
                      single(sum([g(),weight(hCg, 2)]),pref_only=true),
                      single(sum([g(),weight(hCea, 2)])),
                      single(sum([g(),weight(hCea, 2)]),pref_only=true),
                      single(sum([g(),weight(hGoalCount, 2)])),
                      single(sum([g(),weight(hGoalCount, 2)]),pref_only=true)],
                     boost=1000),
                 preferred=[hCea,hGoalCount],reopen_closed=true,cost_type=1)],
            repeat_last=true,continue_on_fail=true)" "$@"
elif [[ "$option" == "seq-sat-fd-autotune-2-single-plan" ]]; then
    "$SERVER" \
        --heuristic "hCea=cea(cost_type=2)" \
        --heuristic "hCg=cg(cost_type=1)" \
        --heuristic "hGoalCount=goalcount(cost_type=2)" \
        --heuristic "hFF=ff(cost_type=0)" \
        --search "iterated([
            ehc(hCea, preferred=hCea,preferred_usage=0,cost_type=0),
            lazy(alt([single(sum([weight(g(), 2),weight(hFF, 3)])),
                      single(sum([weight(g(), 2),weight(hFF, 3)]),pref_only=true),
                      single(sum([weight(g(), 2),weight(hCg, 3)])),
                      single(sum([weight(g(), 2),weight(hCg, 3)]),pref_only=true),
                      single(sum([weight(g(), 2),weight(hCea, 3)])),
                      single(sum([weight(g(), 2),weight(hCea, 3)]),pref_only=true),
                      single(sum([weight(g(), 2),weight(hGoalCount, 3)])),
                      single(sum([weight(g(), 2),weight(hGoalCount, 3)]),pref_only=true)],
                     boost=200),
                 preferred=[hCea,hGoalCount],reopen_closed=false,cost_type=1),
            lazy(alt([single(sum([g(),weight(hFF, 5)])),
                      single(sum([g(),weight(hFF, 5)]),pref_only=true),
                      single(sum([g(),weight(hCg, 5)])),
                      single(sum([g(),weight(hCg, 5)]),pref_only=true),
                      single(sum([g(),weight(hCea, 5)])),
                      single(sum([g(),weight(hCea, 5)]),pref_only=true),
                      single(sum([g(),weight(hGoalCount, 5)])),
                      single(sum([g(),weight(hGoalCount, 5)]),pref_only=true)],
                     boost=5000),
                 preferred=[hCea,hGoalCount],reopen_closed=true,cost_type=0),
            lazy(alt([single(sum([g(),weight(hFF, 2)])),
                          single(sum([g(),weight(hFF, 2)]),pref_only=true),
                      single(sum([g(),weight(hCg, 2)])),
                      single(sum([g(),weight(hCg, 2)]),pref_only=true),
                      single(sum([g(),weight(hCea, 2)])),
                      single(sum([g(),weight(hCea, 2)]),pref_only=true),
                      single(sum([g(),weight(hGoalCount, 2)])),
                      single(sum([g(),weight(hGoalCount, 2)]),pref_only=true)],
                     boost=1000),
                 preferred=[hCea,hGoalCount],reopen_closed=true,cost_type=1)],
            repeat_last=true,continue_on_fail=true,continue_on_solve=false)" "$@"
elif [[ "$options" == "seq-sat-lama-2008" ]]; then
        echo "The seq-sat-lama-2008 planner should not use this code."
    exit 2
elif [[ "$options" == "seq-sat-lama-2011" ]]; then
    if [[ "$UNIT_COST" == "unit" ]]; then
        "$SERVER" \
            --heuristic "hlm,hff=lm_ff_syn(lm_rhw(
                reasonable_orders=true,lm_cost_type=2,cost_type=2))" \
            --search "iterated([
                lazy_greedy([hff,hlm],preferred=[hff,hlm]),
                lazy_wastar([hff,hlm],preferred=[hff,hlm],w=5),
                lazy_wastar([hff,hlm],preferred=[hff,hlm],w=3),
                lazy_wastar([hff,hlm],preferred=[hff,hlm],w=2),
                lazy_wastar([hff,hlm],preferred=[hff,hlm],w=1)],
                repeat_last=true,continue_on_fail=true)" \
            "$@"
    elif [[ "$UNIT_COST" == "nonunit" ]]; then
        "$SERVER" \
            --heuristic "hlm1,hff1=lm_ff_syn(lm_rhw(
                reasonable_orders=true,lm_cost_type=1,cost_type=1))" \
            --heuristic "hlm2,hff2=lm_ff_syn(lm_rhw(
                reasonable_orders=true,lm_cost_type=2,cost_type=2))" \
            --search "iterated([
                lazy_greedy([hff1,hlm1],preferred=[hff1,hlm1],
                            cost_type=1,reopen_closed=false),
                lazy_greedy([hff2,hlm2],preferred=[hff2,hlm2],
                            reopen_closed=false),
                lazy_wastar([hff2,hlm2],preferred=[hff2,hlm2],w=5),
                lazy_wastar([hff2,hlm2],preferred=[hff2,hlm2],w=3),
                lazy_wastar([hff2,hlm2],preferred=[hff2,hlm2],w=2),
                lazy_wastar([hff2,hlm2],preferred=[hff2,hlm2],w=1)],
                repeat_last=true,continue_on_fail=true)" \
            "$@"
    else
        echo "Something is seriously messed up!"
        exit 2
    fi
elif [[ "$option" == "seq-sat-lama-2011-single-plan" ]]; then
    if [[ "$UNIT_COST" == "unit" ]]; then
        "$SERVER" \
            --heuristic "hlm,hff=lm_ff_syn(lm_rhw(
                reasonable_orders=true,lm_cost_type=2,cost_type=2))" \
            --search "iterated([
                lazy_greedy([hff,hlm],preferred=[hff,hlm]),
                lazy_wastar([hff,hlm],preferred=[hff,hlm],w=5),
                lazy_wastar([hff,hlm],preferred=[hff,hlm],w=3),
                lazy_wastar([hff,hlm],preferred=[hff,hlm],w=2),
                lazy_wastar([hff,hlm],preferred=[hff,hlm],w=1)],
                repeat_last=true,continue_on_fail=true,continue_on_solve=false,plan_counter=-1)" \
            "$@"
    elif [[ "$UNIT_COST" == "nonunit" ]]; then
        "$SERVER" \
            --heuristic "hlm1,hff1=lm_ff_syn(lm_rhw(
                reasonable_orders=true,lm_cost_type=1,cost_type=1))" \
            --heuristic "hlm2,hff2=lm_ff_syn(lm_rhw(
                reasonable_orders=true,lm_cost_type=2,cost_type=2))" \
            --search "iterated([
                lazy_greedy([hff1,hlm1],preferred=[hff1,hlm1],
                            cost_type=1,reopen_closed=false),
                lazy_greedy([hff2,hlm2],preferred=[hff2,hlm2],
                            reopen_closed=false),
                lazy_wastar([hff2,hlm2],preferred=[hff2,hlm2],w=5),
                lazy_wastar([hff2,hlm2],preferred=[hff2,hlm2],w=3),
                lazy_wastar([hff2,hlm2],preferred=[hff2,hlm2],w=2),
                lazy_wastar([hff2,hlm2],preferred=[hff2,hlm2],w=1)],
                repeat_last=true,continue_on_fail=true,continue_on_solve=false,plan_counter=-1)" \
            "$@"
    else
        echo "Something is seriously messed up!"
        exit 2
    fi
elif [[ "$option" == "seq-opt-fd-autotune" ]]; then
    "$SERVER" \
        --heuristic "hLMCut=lmcut()" \
        --heuristic "hHMax=hmax()" \
        --heuristic "hCombinedSelMax=selmax(
            [hLMCut,hHMax],alpha=4,classifier=0,conf_threshold=0.85,
            training_set=10,sample=0,uniform=true)" \
        --search "astar(hCombinedSelMax,mpd=false,
                        pathmax=true,cost_type=0)" "$@"
elif [[ "$option" == "seq-opt-selmax" ]]; then
    "$SERVER" --search "astar(selmax([lmcut(),lmcount(lm_merged([lm_hm(m=1),lm_rhw()]),admissible=true)],training_set=1000),mpd=true)" "$@"
elif [[ "$option" == "seq-opt-bjolp" ]]; then
    "$SERVER" --search "astar(lmcount(lm_merged([lm_rhw(),lm_hm(m=1)]),admissible=true),mpd=true)" "$@"
elif [[ "$option" == "seq-opt-lmcut" ]]; then
    "$SERVER" --search "astar(lmcut())" "$@"
elif [[ "$option" == "plain-additive" ]]; then
    "$SERVER" --search "astar(add())" "$@"
else
    echo "unknown IPC planner name: $option"
    exit 2
fi

EXITCODE=$?
exit $EXITCODE

